Golang (LCO YT course) - https://www.youtube.com/playlist?list=PLRAV69dS1uWQGDQoBYMZWKjzuhCaOnBpa
======


=================================================================================================

- Compiled :
1. Go tool can run file directly, without VM.
2. Executables can be generated for different OS.

- What :
1. System apps to web apps - Cloud (Reducing the resources required to run the servers)
2. Already in production 

- Don't bring baggage :
1. Yeah, I did that earlier.
2. Similarity with lots of lanugages - C, java, pascal

- Object oriented 
1. Yes and No (The question is do you really require it to do that or it has its own way to do the things)

- Missing 
1. A lot, but is it really missing?
2. No try catch
3. Lexer does a lot of work

==============================================================================================

===={Hello, World!}====

- To create the go app follow the steps
1. Create main.go file in directory
2. Run "go mod init <module name>" it will create/initialize the module file (more on it later)
3. To run the go main.go file use command "go run main.go" (It will directly run the file without creating any executables)

- You can make use of command "go help" to learn more about the go documenation and tinker around.


===={Lexer}====
- Lexer is the part of compiler in any language which checks the grammar of the language and helps for syntax errors.
- In go, the lexer will putup the semicolons for you, no need to do it explicitly.
- Use it in complex statments though for clean code :)
- More on this in go lang specifications - https://go.dev/ref/spec


===={Types}====
- Case sensitive; almost! Captial first letter -> Public, if small -> Private
- Variable type should be known in advance
- Everything is a Type

Basic Types :
-----------
1. String
2. Bool
3. Integer - uint8, uint64, int8, int64, uintptr 
 (aliases are involved too.)
4. Float - float32, float64
5. Complex

Advance Types :
-------------
1. Array
2. Slices
3. Maps
4. Structs
5. Pointers

===={Variables}====

To learn more about the variables, there size and bound values, it is available on go site.
Usually `int` works at most of the places for os-specific stuff you need to use `uint`.

* If you not assign the values to variable, go will auto-assigns - "", 0, false etc.

- Aliases in go -

1. byte alias for uint8
2. rune alias for int32
3. int alias for unit (uint either 32 or 64 bits)
... many more ...


- implicit type -

	* You can directly write the variable without mentioning the type, type is determined by the value you assigned.
Once the value is assigned the type gets fixed and you can't change it for that variable till its scope.


- no var style - 

	* Here we don't use the `var` keyword, we use the special operator to assign the values `:=`.
It is used in the functions only, not as a global variable, it is short form of variable declaration.
eg. numberOfUsers := 32


===={user input}====

To read and find the go packages you can visit -> https://pkg.go.dev/

We need to packages -
1. bufio -> NewReader() : to take the user input
2. os -> Stdin() : to take input from os standard input


- comma ok || comma err syntx -
In go there is no try catch, every thing expects either value or error.

1. variable, err := function returns something either value or error
2. variable, _ := We are not expecting the error or ignoring it
3. _, err := We are not expecting the value for variable or ignoring it, we are intersted in error


- Type conversion -
 * We use the strconv package for type conversion
	- ParseFloat()
	- ParseInt()
	... many more ...

- strings package -
	* strings pacakge contains utilities to work with string like
	- UpperCase
	- LowerCase
	- Trim
	... many more ... 


===={Maths, crypto and random}====
* There are many ways to generate the random numbers.
2 of them are using the math/rand pkg and crypto/rand pkg. (read docs for more info.)


===={Handling Time}====

- We use time package
- There are specific number which you need to use for formating the date and time.
- All this needs to be as it is, making change will cause an error

 dd/mm/yy -> 02/01/2006
 day -> Monday
 time -> 15:04:05

... more details of go docs ...


===={Memory Management}====
* Memory allocation and deallocation happens automatically.

* 2 Keywords used to allocate the memory

1. new()
- Allocate memory but no INIT (initialization of a memory)
- You will get a memory address
- Zeroed storage (Where you can't put any data initialy)

2. make()
- Allocate memory and INIT
- You will get a memory address 
- Non-zeroed storage (Where you can put data initialy)

* GC happens automatically
* Out of scope or nil

* More on Runtime package to get low level information visit - https://pkg.go.dev/runtime


=== {GO MOD } ===

When you write backend application it eventually has to go into production.
Go Mod is one of the tool from go which helps to do lot of things
https://go.dev/blog/using-go-modules